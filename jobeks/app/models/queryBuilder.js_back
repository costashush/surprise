var con = require('./dbConnection.js');

var queryBuilder = (function () {

    function initAgent(db) {

        db.collection('users').find({}).toArray(function (err, res) {
            if (err) {
                return err

            } else {

                res.forEach(function (user) {
                    console.log(user['_id']);

                    findJobForUser(user['_id'], db)
                }, this);
            }
        })

    }

    function findJobForUser(userId, db) {

        db.collection('users').findOne({ _id: userId }, function (err, result) {
            if (err) {
                return err;
            }
            else {
                var userSkills = result.skills;
                findJob(userSkills, userId, db)
            }
        })
    }


    function findJob(userSkills, userId, db) {
        db.collection('jobs').find({ 'skills': { $in: userSkills } }, { _id: 1 }).toArray(
            function (err, res) {
                if (err) {
                    return err
                } else {
                    // console.log(res)//ids
                    var idArr = [];
                    for (let item of res) {
                        idArr.push(item['_id'])

                    }
                    // console.log(idArr)
                    db.collection('users').update({ '_id': userId }, { $push: { 'agent': { $each: idArr } } });
                    // db.collection('users').find({'_id':userId})                
                }
            }
        )
    }


    function getSkills(callback) {
        con.then((db) => {
            db.collection('jobs').find({}).toArray(function (err, result) {
                if (err) {
                    callback(err)
                } else {
                    callback(result)
                }
            })
        })
    }





    function getJobsQuery() {
        db.jobs.find({})
    }

    function getUserValid(user, pass) {
        db.users.findOne({ 'userName': user, 'pass': pass })
    }

    function getUserDetailsQuery(userId) {
        db.users.find({ '_id': userId })
    }

    //update the user by user Id
    function getUpdataUeserDetailsQuery(userData) {
        db.users.update({ '_id': userData.id }, { 'firstName': userData.firstName, 'email': userData.email, 'description': userData.description, 'lcationName': userData.lcationName, 'lon': userData.lon, 'lat': userData.lat, 'userName': userData.userName, 'pass': userData.pass, 'skills': userData.skills })

    }

    //get the jobs that the user has published
    function getUserJobsQuery(userId) {
        db.jobs.find({ 'pub_id': userId }).toArray()
    }
    //publish new job 
    function addPubJobQuery(job) {
        var today = new Date().toISOString().substring(0, 10);
        db.jobs.insert({ 'jobName': job.jobName, 'pub_date': today, 'pub_id': job.pub_id, 'description': job.description, locationName: job.locationName, 'lon': job.lon, 'lat': job.lat, 'skills': job.skills })
        db.jobs.insert({ 'jobName': 'job.jobName', 'pub_date': new Date().toISOString().substring(0, 10), 'pub_id': 'job.pub_id', 'description': 'job.description', 'locationName': 'job.locationName', 'lon': 'job.lon', 'lat': 'job.lat', 'skills': 'job.skills', 'jobApplicants': [] })

    }


    //why do we need this
    function getJobIdQuery(job) {
        db.jobs.find({ 'jobName': job.jobName, pub_id: job.pub_id })
    }

    function addUserQuery(userData) {
        db.users.insert({ '_id': userData.id }, { 'firstName': userData.firstName, 'email': userData.email, 'description': userData.description, 'lcationName': userData.lcationName, 'lon': userData.lon, 'lat': userData.lat, 'userName': userData.userName, 'pass': userData.pass, 'skills': userData.skills, agent: [] })
    }
    function getAllLocations() {
        //googe API

    }

    function getAllSkills() {
        db.skills.find({})

    }


    return {
        getSkills,
        initAgent,
        getJobsQuery,
        getUserValid,
        getUserDetailsQuery,
        getUpdataUeserDetailsQuery,
        getUserJobsQuery,
        addPubJobQuery,
        getJobIdQuery,
        addUserQuery,
        getAllLocations,
        getAllSkills

    }


}
)();
module.exports = queryBuilder;
